{"version":3,"sources":["CheckBox.js","index.js"],"names":["CheckBox","props","onChange","handleCheckChieldElement","type","checked","isChecked","value","id","Square","className","onClick","this","React","Component","SquareScores","Board","event","modes","state","forEach","mode","target","setState","squares","squares_print","scores","nbGames","end","result","nbPairs","nbPairsFound","score","nickname1","nickname2","oneIsNext","infos","cXr","col","handleFormPairs","bind","handleFormNick1","handleFormNick2","prevstate","checkModes","console","log","Math","pow","Array","parseInt","fill","concat","keys","array","temporaryValue","randomIndex","currentIndex","length","floor","random","shuffle","i","p","push","handleSquareClick","table","k","children","j","renderSquare","row","renderSquareScores","tour","status","points","map","index","name","variant","setGame","createTable","createTableScores","Game","ReactDOM","render","document","getElementById"],"mappings":"oPAWeA,EARS,SAAAC,GACpB,OACE,gCACC,uBAAsBC,SAAUD,EAAME,yBAA0BC,KAAK,WAAWC,QAASJ,EAAMK,UAAWC,MAAON,EAAMM,OAA3GN,EAAMO,IADnB,IACmIP,EAAMM,UCDzIE,G,6KACM,IAAD,OACP,OACE,wBAAQC,UAAU,SAChBC,QAAS,kBAAM,EAAKV,MAAMU,WAD5B,SAEGC,KAAKX,MAAMM,Y,GALCM,IAAMC,YAWrBC,E,uKAEF,OACE,wBAAQL,UAAU,gBAAlB,SACGE,KAAKX,MAAMM,Y,GAJOM,IAAMC,WAU3BE,E,kDACJ,WAAYf,GAAQ,IAAD,8BACjB,cAAMA,IA8ORE,yBAA2B,SAACc,GAC1B,IAAIC,EAAQ,EAAKC,MAAMD,MACvBA,EAAME,SAAQ,SAAAC,GACPA,EAAKd,QAAUU,EAAMK,OAAOf,QAC3Bc,EAAKf,UAAaW,EAAMK,OAAOjB,YAEvC,EAAKkB,SAAS,CAACL,MAAOA,KAnPtB,EAAKC,MAAQ,CAEXD,MAAO,CAAC,CAACV,GAAI,EAAGD,MAAO,WAAYD,WAAW,GAC9C,CAACE,GAAI,EAAGD,MAAO,WAAYD,WAAW,GACtC,CAACE,GAAI,EAAGD,MAAO,YAAaD,WAAW,IACvCe,KAAM,EAENG,QAAS,GACTC,cAAe,GACfC,OAAQ,GACRC,QAAS,EACTC,KAAK,EAILC,OAAQ,EAAE,GAAI,GAAG,GAEjBC,QAAS,EACTC,aAAc,EAEdC,MAAO,CAAC,EAAE,GACVC,UAAW,QACXC,UAAW,SACXC,WAAW,EACXC,MAAO,sBAEPC,IAAK,EACLC,IAAK,GAEP,EAAKC,gBAAkB,EAAKA,gBAAgBC,KAArB,gBACvB,EAAKC,gBAAkB,EAAKA,gBAAgBD,KAArB,gBACvB,EAAKE,gBAAkB,EAAKA,gBAAgBF,KAArB,gBAjCN,E,sDAoCR,IAAD,OACR5B,KAAKW,UAAS,SAACoB,GAEb,IAAIL,EAAM,EACND,EAAM,EAGNH,EAAY,SACZb,EAAO,EAAKuB,WAAWD,EAAUzB,OAQrC,IAPA2B,QAAQC,IAAI,SAAWzB,GACX,IAATA,IACDa,EAAY,OAGdW,QAAQC,IAAI,QAAUT,GAEfA,GAAyB,EAAlBM,EAAUb,SACtBQ,GAAK,EACLD,EAAMU,KAAKC,IAAIV,EAAI,GACnBO,QAAQC,IAAI,QAAUT,GAExBQ,QAAQC,IAAI,QAAUR,EAAM,WAAYD,EAAM,MAA2B,EAAnB,EAAKlB,MAAMW,SAGjEe,QAAQC,IAAI,YAAcH,EAAUb,SACpC,IAAIL,EAAgBwB,MAAwC,EAAlCC,SAASP,EAAUb,QAAS,KAASqB,KAAK,KACpE1B,EAAgBA,EAAc2B,OAAOH,MAAMZ,EAAI,EAAKlB,MAAMW,SAASqB,KAAK,MACxEN,QAAQC,IAAI,kBAAoBrB,GAGhC,IAAID,EAAO,YAAOyB,MAAMC,SAASP,EAAUb,QAAS,KAAKuB,QAIzD,OAHA7B,EA4UN,SAAiB8B,GACf,IAAiCC,EAAgBC,EAA7CC,EAAeH,EAAMI,OAGzB,KAAO,IAAMD,GAGXD,EAAcT,KAAKY,MAAMZ,KAAKa,SAAWH,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAEvB,OAAOD,EA3VOO,CAAQrC,EAAQ4B,OAAR,YAAmBH,MAAMC,SAASP,EAAUb,QAAS,KAAKuB,UAC5ER,QAAQC,IAAI,YAActB,GAEnB,CACLA,QAASA,EACTC,cAAeA,EACfI,OAAQ,EAAE,GAAI,GAAG,GACjBE,aAAc,EACdC,MAAO,CAAC,EAAE,GACVI,MAAO,OACPD,WAAW,EACXE,IAAKA,EACLC,IAAKA,EACLV,KAAK,EACLP,KAAMA,EACNa,UAAWA,Q,iCAMNhB,GAET,OAAIA,EAAM,GAAGZ,UACJY,EAAM,GAAGV,GAGTU,EAAM,GAAGZ,UACTY,EAAM,GAAGV,GAGTU,EAAM,GAAGZ,UACTY,EAAM,GAAGV,QADb,I,wCAMWsD,GAEhBlD,KAAKW,UAAS,SAACoB,GAEb,IAAId,EAAM,eAAQc,EAAUd,QACxBL,EAAO,eAAQmB,EAAUnB,SACzBC,EAAa,eAAQkB,EAAUlB,eAC/BO,EAAQW,EAAUX,MAClBD,EAAeY,EAAUZ,aACzBI,EAAYQ,EAAUR,UACtBC,EAAQ,OACRT,EAAUgB,EAAUhB,QACpBoC,EAAI,EAEJrC,EAASiB,EAAUjB,OA+EvB,OA3EsB,IAAnBiB,EAAUtB,OACX0C,EAAI5B,EAAY,EAAI,GAGtBU,QAAQC,IAAI,wBAEZD,QAAQC,IAAIjB,IACO,IAAfA,EAAO,KAA4B,IAAfA,EAAO,MACX,IAAdA,EAAO,KACTJ,EAAcI,EAAO,IAAM,IAC3BJ,EAAcI,EAAO,IAAM,KAE7BA,EAAS,EAAE,GAAI,GAAG,KAKD,IAAfA,EAAO,KAA4B,IAAfA,EAAO,GACJ,MAArBJ,EAAcqC,IAChBjC,EAAO,GAAKiC,EACZrC,EAAcqC,GAAKtC,EAAQsC,IAG3B1B,EAD+B,qBAAfZ,EAAQsC,GAChB,gBAEA,0BAKc,IAAfjC,EAAO,KACS,MAArBJ,EAAcqC,IAChBjC,EAAO,GAAKiC,EACZrC,EAAcqC,GAAKtC,EAAQsC,GAC3BjB,QAAQC,IAAI,4BACRjB,EAAO,KAAOA,EAAO,IAAML,EAAQK,EAAO,MAAQL,EAAQK,EAAO,KACnEJ,EAAcI,EAAO,IAAML,EAAQK,EAAO,IAC1CJ,EAAcI,EAAO,IAAML,EAAQK,EAAO,IAC1CA,EAAO,IAAK,EACZG,EAAM+B,GAAK/B,EAAM+B,GAAK,EACtBhC,GAAgB,IAEhBF,EAAO,IAAK,EACZG,EAAM+B,GAAK/B,EAAM+B,GAAK,GAEF,IAAnBpB,EAAUtB,OACXc,GAAaA,IAGfC,EAD+B,qBAAfZ,EAAQsC,GAChB,gBAEA,yBAEVjB,QAAQC,IAAI,WAAad,GACzBa,QAAQC,IAAI,cAAgBX,IAE9BU,QAAQC,IAAI,iBAAmBf,GAC/Bc,QAAQC,IAAI,sBAAwBH,EAAUb,SAC9Ce,QAAQC,IAAI,kBAAoBH,EAAUf,KACtCG,IAAiBY,EAAUb,SAAWa,EAAUf,MAClDQ,EAAQ,aACRS,QAAQC,IAAI,gBACZnB,GAAW,EACW,IAAnBgB,EAAUtB,MACXK,EAAOsC,KAAKrB,EAAUV,UAAWU,EAAUX,MAAM,IACjDN,EAAOsC,KAAKrB,EAAUT,UAAWS,EAAUX,MAAM,IACjDa,QAAQC,IAAI,sBAGZpB,EAAOsC,KAAKrB,EAAUV,UAAWU,EAAUX,MAAM,IACjDN,EAAOsC,KAAK,IAAK,OAKd,CACLxC,QAASA,EACTC,cAAeA,EACfI,OAAQA,EACRG,MAAOA,EACPD,aAAcA,EACdK,MAAOA,EACPD,UAAWA,EACXR,QAASA,EACTD,OAAQA,EACRE,KAxFQ,Q,sCA6FEX,GACdL,KAAKW,UAAS,WACZ,MAAM,CACJO,QAASb,EAAMK,OAAOf,UAG1BsC,QAAQC,IAAIlC,KAAKO,MAAMW,W,sCAGTb,GACdL,KAAKW,UAAS,WACZ,MAAM,CACJU,UAAWhB,EAAMK,OAAOf,UAG5BsC,QAAQC,IAAIlC,KAAKO,MAAMc,a,sCAGThB,GACdL,KAAKW,UAAS,WACZ,MAAM,CACJW,UAAWjB,EAAMK,OAAOf,UAG5BsC,QAAQC,IAAIlC,KAAKO,MAAMe,a,mCAaZ4B,GAAI,IAAD,OACd,OAAO,cAAC,EAAD,CAAQvD,MAAOK,KAAKO,MAAMM,cAAcqC,GAE7CnD,QAAS,kBAAM,EAAKsD,kBAAkBH,KADjCA,K,yCAIUA,GACjB,OAAO,cAAC,EAAD,CAAcvD,MAAOK,KAAKO,MAAMO,OAAOoC,IACvCA,K,oCASP,IAJA,IAAII,EAAQ,GACRC,EAAI,EACJ7B,EAAM1B,KAAKO,MAAMmB,IAEZwB,EAAI,EAAGA,EAAIxB,EAAKwB,IAAK,CAE5B,IADA,IAAIM,EAAW,GACNC,EAAI,EAAGA,EAAI/B,EAAK+B,IACvBD,EAASJ,KAAKpD,KAAK0D,aAAaH,IAChCA,IAEFD,EAAMF,KAAKI,GACXF,EAAMF,KAAK,qBAAKtD,UAAU,aAAiBoD,IAE7C,OAAOI,I,0CAIP,IAAIA,EAAQ,GACRC,EAAI,EAEJI,EAAM3D,KAAKO,MAAMQ,QACrBkB,QAAQC,IAAI,QAAUyB,GAEtB,IAAK,IAAIT,EAAI,EAAGA,EAAIS,EAAKT,IAAK,CAE5B,IADA,IAAIM,EAAW,GACNC,EAAI,EAAGA,EANR,EAMiBA,IACvBD,EAASJ,KAAKpD,KAAK4D,mBAAmBL,IACtCA,IAEFD,EAAMF,KAAKI,GACXF,EAAMF,KAAK,qBAAKtD,UAAU,aAAiBoD,IAE7C,OAAOI,I,+BAIC,IAAD,OAGHO,EAAO,eAAe7D,KAAKO,MAAMgB,UAAavB,KAAKO,MAAMc,UAAYrB,KAAKO,MAAMe,WAAa,YAC7FwC,EAAS9D,KAAKO,MAAMiB,MACpBuC,EAAS,GAQb,OANEA,EADsB,IAApB/D,KAAKO,MAAME,KACJT,KAAKO,MAAMc,UAAY,KAAOrB,KAAKO,MAAMa,MAAM,GAAK,WAAapB,KAAKO,MAAMe,UAAY,KAAOtB,KAAKO,MAAMa,MAAM,GAAK,MAErHpB,KAAKO,MAAMc,UAAY,KAAOrB,KAAKO,MAAMa,MAAM,GAAK,OAK7D,gCACE,qBAAKtB,UAAU,WAAf,mBACA,qBAAKA,UAAU,QAAf,mCACA,6BACGE,KAAKO,MAAMD,MAAM0D,KAAI,SAACvD,EAAMwD,GAC3B,OAAQ,cAAC,EAAD,aACN1E,yBAA0B,EAAKA,0BAC3BkB,GAFiBwD,QAO3B,+BACE,8CAEE,uBAAOnE,UAAU,iBAAiBH,MAAOK,KAAKO,MAAMc,UAAW7B,KAAK,OAAO0E,KAAK,OAC9E5E,SAAUU,KAAK6B,uBAIrB,+BACE,8CAEE,uBAAO/B,UAAU,iBAAiBH,MAAOK,KAAKO,MAAMe,UAAW9B,KAAK,OAClEF,SAAUU,KAAK8B,uBAKrB,qBAAKhC,UAAU,SAAf,SAAyBiE,IAEzB,wBAAQjE,UAAU,SAASqE,QAAQ,UACjCpE,QAAS,kBAAM,EAAKqE,WADtB,mBAIA,8BAAM,IAAIN,IAEV,qBAAKhE,UAAU,SAAf,SAAyB+D,IAEzB,8BAAM7D,KAAKqE,gBAEX,+BACE,6CACE,uBAAOvE,UAAU,cAAcH,MAAOK,KAAKO,MAAMW,QAAS1B,KAAK,SAC7DF,SAAUU,KAAK2B,kBACd,MACA3B,KAAKO,MAAMW,QAAUlB,KAAKO,MAAMY,aAAc,yBAIrD,gCACG,qBACD,uBACCnB,KAAKsE,8B,GA9WIrE,IAAMC,WAuXpBqE,E,uKAEF,OACE,sBAAKzE,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAAC,EAAD,MAEF,sBAAKA,UAAU,YAAf,UACE,wBACA,iC,GATSG,IAAMC,WAkBzBsE,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.dca73615.chunk.js","sourcesContent":["import React from 'react'\r\n//Checkbox Volé honteusement sur un site random\r\n\r\nexport const CheckBox = props => {\r\n    return (\r\n      <div>\r\n       <input key={props.id} onChange={props.handleCheckChieldElement} type=\"checkbox\" checked={props.isChecked} value={props.value} /> {props.value}\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default CheckBox","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport  CheckBox  from './CheckBox';\nimport './index.css';\n\nclass Square extends React.Component {\n  render() {\n    return (\n      <button className=\"square\"\n        onClick={() => this.props.onClick()}>\n        {this.props.value}\n      </button>\n    );\n  }\n}\n\nclass SquareScores extends React.Component {\n  render() {\n    return (\n      <button className=\"square-scores\">\n        {this.props.value}\n      </button>\n    );\n  }\n}\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      \n      modes: [{id: 1, value: \"1 joueur\", isChecked: true},\n      {id: 2, value: \"2 joueur\", isChecked: false},\n      {id: 3, value: \"vs Random\", isChecked: false},],\n      mode: 1,\n\n      squares: [],\n      squares_print: [],\n      scores: [],\n      nbGames: 0,\n      end: false,\n\n      //-1 si pas d'information, sinon id de la case\n      //false si mauvaise paire, true si bonne paire\n      result: [-1, -1, false], \n      \n      nbPairs: 2,\n      nbPairsFound: 0,\n\n      score: [0,0],\n      nickname1: \"Hopla\",\n      nickname2: \"Titeuf\",\n      oneIsNext: false,\n      infos: \" | Start pour jouer\",\n\n      cXr: 0, //Nombre de cases (Columns * Rows)\n      col: 0, //Nombre de colones\n    };\n    this.handleFormPairs = this.handleFormPairs.bind(this)\n    this.handleFormNick1 = this.handleFormNick1.bind(this)\n    this.handleFormNick2 = this.handleFormNick2.bind(this)\n  }\n\n  setGame() {\n    this.setState((prevstate) => {\n      \n      let col = 1\n      let cXr = 0\n\n\n      let nickname2 = \"Titeuf\"\n      let mode = this.checkModes(prevstate.modes)\n      console.log(\"mode: \" + mode)\n      if(mode === 1){\n        nickname2 = \"---\"\n      }\n\n      console.log(\"cXr :\" + cXr)\n      // On cherche à avoir un carré peut importe le nombre de paires\n      while (cXr <= prevstate.nbPairs*2) { //tant que colonne * ligne < nombre de cartes\n        col+=1\n        cXr = Math.pow(col,2)\n        console.log(\"cXr :\" + cXr)\n      }\n      console.log(\"col: \" + col + \" | cXr: \"+ cXr + \" | \" + this.state.nbPairs*2)\n\n      // Création de l'array a affiché rempli de null\n      console.log(\"nbPairs: \" + prevstate.nbPairs)\n      let squares_print = Array(parseInt(prevstate.nbPairs, 10) * 2).fill(\"?\")\n      squares_print = squares_print.concat(Array(cXr-this.state.nbPairs).fill(\"-\"))\n      console.log(\"squares_print :\" + squares_print)\n\n      // Création de l'array avec les chiffres, rempli aléatoirement\n      let squares = [...Array(parseInt(prevstate.nbPairs, 10)).keys()]\n      squares = shuffle(squares.concat([...Array(parseInt(prevstate.nbPairs, 10)).keys()]))\n      console.log(\"squares :\" + squares)\n\n      return {\n        squares: squares,\n        squares_print: squares_print,\n        result: [-1, -1, false],\n        nbPairsFound: 0,\n        score: [0,0],\n        infos: \"GO !\",\n        oneIsNext: true,\n        cXr: cXr,\n        col: col,\n        end: false,\n        mode: mode,\n        nickname2: nickname2,\n      };\n    });\n  }\n\n\n  checkModes(modes){\n    //1 joueur\n    if (modes[0].isChecked){\n      return(modes[0].id)\n    }\n    //2 joueur\n    else if (modes[1].isChecked){\n      return(modes[1].id)\n    }\n    //random\n    else if (modes[2].isChecked){\n      return(modes[2].id)\n    }\n\n  }\n\n  handleSquareClick(i) {\n\n    this.setState((prevstate) => {\n\n      let result = { ...prevstate.result }\n      let squares = { ...prevstate.squares }\n      let squares_print = { ...prevstate.squares_print }\n      let score = prevstate.score\n      let nbPairsFound = prevstate.nbPairsFound\n      let oneIsNext = prevstate.oneIsNext\n      let infos = \"GO !\"\n      let nbGames = prevstate.nbGames\n      let p = 0\n\n      let scores = prevstate.scores\n      let end = true\n\n\n      if(prevstate.mode !== 1){\n        p = oneIsNext ? 0 : 1\n      }\n\n      console.log(\"----NouveauClick----\")\n      //2 cartes d'affichés\n      console.log(result)\n      if (result[0] !== -1 && result[1] !== -1) {\n        if (result[2] === false) {\n          squares_print[result[0]] = \"?\"\n          squares_print[result[1]] = \"?\"\n        }\n        result = [-1, -1, false]\n\n\n        //0 cartes d'affichés\n      }\n      if (result[0] === -1 && result[1] === -1) {\n        if (squares_print[i] === \"?\") {\n          result[0] = i\n          squares_print[i] = squares[i]\n\n        } else if (typeof squares[i] === 'undefined'){\n          infos = \"Pas une carte\"\n        } else {\n          infos = \"Déjà retourné\"\n        }\n\n\n        //1 cartes d'affichés\n      } else if (result[1] === -1) {\n        if (squares_print[i] === \"?\") {\n          result[1] = i\n          squares_print[i] = squares[i]\n          console.log(\"nb cartes affichés: 1\")\n          if (result[0] !== result[1] && squares[result[0]] === squares[result[1]]) {\n            squares_print[result[0]] = squares[result[0]]\n            squares_print[result[1]] = squares[result[1]]\n            result[2] = true\n            score[p] = score[p] + 3\n            nbPairsFound += 1\n          } else {\n            result[2] = false\n            score[p] = score[p] - 1\n          }\n          if(prevstate.mode !== 1){\n            oneIsNext = !oneIsNext\n          }\n        } else if (typeof squares[i] === 'undefined'){\n          infos = \"Pas une carte\"\n        } else {\n          infos = \"Déjà retourné\"\n        }\n        console.log(\"score : \" + score)\n        console.log(\"oneIsNext: \" + oneIsNext)\n      }\n      console.log(\"nbPairsFound: \" + nbPairsFound)\n      console.log(\"prevstate.nbPairs: \" + prevstate.nbPairs)\n      console.log(\"prevstate.end: \" + prevstate.end)\n      if (nbPairsFound === prevstate.nbPairs && prevstate.end) {\n        infos = \"Gagné !\"\n        console.log(\"We are in ! \")\n        nbGames += 1\n        if(prevstate.mode !== 1){\n          scores.push(prevstate.nickname1, prevstate.score[0])\n          scores.push(prevstate.nickname2, prevstate.score[1])\n          console.log(\"We are in X 2 !!\")\n        }\n        else{\n          scores.push(prevstate.nickname1, prevstate.score[0])\n          scores.push(\"_\", \"_\")\n        }\n \n      }\n      \n      return {\n        squares: squares,\n        squares_print: squares_print,\n        result: result,\n        score: score,\n        nbPairsFound: nbPairsFound,\n        infos: infos,\n        oneIsNext: oneIsNext,\n        nbGames: nbGames,\n        scores: scores,\n        end: end,\n      };\n    });\n  }\n\n  handleFormPairs(event) {\n    this.setState(() => {\n      return{\n        nbPairs: event.target.value \n      }\n    })\n    console.log(this.state.nbPairs)\n  }\n\n  handleFormNick1(event) {\n    this.setState(() => {\n      return{\n        nickname1: event.target.value \n      }\n    })\n    console.log(this.state.nickname1)\n  }\n\n  handleFormNick2(event) {\n    this.setState(() => {\n      return{\n        nickname2: event.target.value \n      }\n    })\n    console.log(this.state.nickname2)\n  }\n\n  handleCheckChieldElement = (event) => {\n    let modes = this.state.modes\n    modes.forEach(mode => {\n       if (mode.value === event.target.value)\n            mode.isChecked =  event.target.checked\n    })\n    this.setState({modes: modes})\n  }\n\n\n  renderSquare(i) {\n    return <Square value={this.state.squares_print[i]}\n      key={i}\n      onClick={() => this.handleSquareClick(i)} />;\n  }\n\n  renderSquareScores(i) {\n    return <SquareScores value={this.state.scores[i]}\n      key={i}/>;\n  }\n\n\n  createTable() {\n    let table = []\n    let k = 0\n    let col = this.state.col\n\n    for (let i = 0; i < col; i++) {\n      let children = []\n      for (let j = 0; j < col; j++) {\n        children.push(this.renderSquare(k))\n        k++\n      }\n      table.push(children)\n      table.push(<div className=\"board-row\" key={i}></div>)\n    }\n    return table\n  }\n\n  createTableScores() {\n    let table = []\n    let k = 0\n    let col = 4\n    let row = this.state.nbGames\n    console.log(\"row: \" + row)\n\n    for (let i = 0; i < row; i++) {\n      let children = []\n      for (let j = 0; j < col; j++) {\n        children.push(this.renderSquareScores(k))\n        k++\n      }\n      table.push(children)\n      table.push(<div className=\"board-row\" key={i}></div>)\n    }\n    return table\n  }\n\n\n  render() {\n\n\n    let tour = \"C'est à \" + ((this.state.oneIsNext) ? this.state.nickname1 : this.state.nickname2) + \" de jouer\"\n    let status = this.state.infos\n    let points = \"\"\n    if (this.state.mode !== 1) {\n      points = this.state.nickname1 + \": \" + this.state.score[0] + \"pts  |  \" + this.state.nickname2 + \": \" + this.state.score[1] + \"pts\"\n    } else {\n      points = this.state.nickname1 + \": \" + this.state.score[0] + \"pts \"\n    }\n\n\n    return (\n      <div>\n        <div className=\"titleTHE\"> THE </div>\n        <div className=\"title\"> Numbers Memory Game </div>\n        <ul>\n          {this.state.modes.map((mode, index) => {\n            return (<CheckBox key={index} \n              handleCheckChieldElement={this.handleCheckChieldElement}  \n              {...mode} />)\n            })\n          }\n        </ul>\n        \n        <form>\n          <label>\n            Joueur 1:\n            <input className=\"text-nicknames\" value={this.state.nickname1} type=\"text\" name=\"toto\"\n              onChange={this.handleFormNick1}\n            />\n          </label>\n        </form>\n        <form>\n          <label>\n            Joueur 2:\n            <input className=\"text-nicknames\" value={this.state.nickname2} type=\"text\"\n              onChange={this.handleFormNick2}\n            />\n          </label>\n        </form>\n\n        <div className=\"status\">{points}</div>\n\n        <button className=\"button\" variant=\"primary\"\n          onClick={() => this.setGame()}>Start\n        </button>\n\n        <div>{\" \"+status}</div>\n        \n        <div className=\"status\">{tour}</div>\n        \n        <div>{this.createTable()}</div>\n        \n        <form>\n          <label>Paires :\n            <input className=\"text-paires\" value={this.state.nbPairs} type=\"number\"\n              onChange={this.handleFormPairs}/>\n              {\" | \"}\n              {this.state.nbPairs - this.state.nbPairsFound}{' paires restantes'}\n          </label>\n        </form>\n        \n        <div>\n          {\"Tableau des scores\"}\n          <br />\n          {this.createTableScores()}\n        </div>\n      \n      </div>\n\n    );\n  }\n}\n\nclass Game extends React.Component {\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board />\n        </div>\n        <div className=\"game-info\">\n          <div>{/* status */}</div>\n          <ol>{/* TODO */}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n\n//Volé honteusement sur un site radom\nfunction shuffle(array) {\n  var currentIndex = array.length, temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n  return array;\n}"],"sourceRoot":""}