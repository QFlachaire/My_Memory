{"version":3,"sources":["images/(1).jpg","index.js"],"names":["Square","className","onClick","props","this","value","React","Component","SquareScores","Board","state","squares","squares_print","scores","nbGames","result","nbPairs","nbPairsFound","score","nickname1","nickname2","oneIsNext","infos","cXr","col","handleFormPairs","bind","handleFormNick1","handleFormNick2","setState","prevstate","console","log","Math","pow","Array","parseInt","fill","concat","keys","array","temporaryValue","randomIndex","currentIndex","length","floor","random","shuffle","push","i","p","endgame","event","target","handleSquareClick","table","k","children","j","renderSquare","row","renderSquareScores","nickname0","src","tour","status","points","style","width","type","name","onChange","variant","setGame","createTable","onError","img1","alt","createTableScores","Game","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5cfac73d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/(1).c9d27a1b.jpg\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport img1 from \"./images/(1).jpg\";\n\n\nclass Square extends React.Component {\n  \n  render() {\n    return (\n      <button className=\"square\"\n        onClick={() => this.props.onClick()}>\n        {this.props.value}\n      </button>\n    );\n  }\n}\n\nclass SquareScores extends React.Component {\n  \n  render() {\n    return (\n      <button className=\"square-scores\">\n        {this.props.value}\n      </button>\n    );\n  }\n}\n\nclass Board extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: [],\n      squares_print: [],\n      scores: [],\n      nbGames: 0,\n\n      //-1 si pas d'information, sinon id de la case\n      //false si mauvaise paire, true si bonne paire\n      result: [-1, -1, false], \n      \n      nbPairs: 2,\n      nbPairsFound: 0,\n\n      score: [0,0],\n      nickname1: \"Hopla\",\n      nickname2: \"Titeuf\",\n      oneIsNext: true,\n      infos: \" | Start pour jouer\",\n\n      cXr: 0, //Nombre de cases (Columns * Rows)\n      col: 0, //Nombre de colones\n    };\n    this.handleFormPairs = this.handleFormPairs.bind(this)\n    this.handleFormNick1 = this.handleFormNick1.bind(this)\n    this.handleFormNick2 = this.handleFormNick2.bind(this)\n  }\n\n  setGame() {\n\n    this.setState((prevstate) => {\n      \n\n      let col = 1\n      let cXr = 0\n      console.log(\"cXr :\" + cXr)\n      // On cherche à avoir un carré peut importe le nombre de paires\n      while (cXr <= prevstate.nbPairs*2) { //tant que colonne * ligne < nombre de cartes\n        col+=1\n        cXr = Math.pow(col,2)\n        console.log(\"cXr :\" + cXr)\n      }\n      console.log(\"col: \" + col + \" | cXr: \"+ cXr + \" | \" + this.state.nbPairs*2)\n\n\n      console.log(\"nbPairs: \" + prevstate.nbPairs)\n      let squares_print = Array(parseInt(prevstate.nbPairs, 10) * 2).fill(null)\n      squares_print = squares_print.concat(Array(cXr-this.state.nbPairs).fill(\"-\"))\n      console.log(\"squares_print :\" + squares_print)\n\n      let squares = [...Array(parseInt(prevstate.nbPairs, 10)).keys()]\n      squares = shuffle(squares.concat([...Array(parseInt(prevstate.nbPairs, 10)).keys()]))\n      console.log(\"squares :\" + squares)\n\n      return {\n        squares: squares,\n        squares_print: squares_print,\n        result: [-1, -1, false],\n        nbPairsFound: 0,\n        score: [0,0],\n        infos: \" | GO!\",\n        oneIsNext: true,\n        cXr: cXr,\n        col: col\n      };\n    });\n  }\n\n  endgame() {\n    this.setState((prevstate) => {\n      let scores = prevstate.scores\n\n      scores.push(prevstate.nickname1, prevstate.score[0])\n      scores.push(prevstate.nickname2, prevstate.score[1])      \n\n      return {\n        scores: scores\n      }\n    })\n  }\n\n  handleSquareClick(i) {\n\n    this.setState((prevstate) => {\n\n      let result = { ...prevstate.result }\n      let squares = { ...prevstate.squares }\n      let squares_print = { ...prevstate.squares_print }\n      let score = prevstate.score\n      let nbPairsFound = prevstate.nbPairsFound\n      let oneIsNext = prevstate.oneIsNext\n      let infos = \"\"\n      let nbGames = prevstate.nbGames\n      let p = oneIsNext ? 0 : 1\n\n      //2 cartes d'affichés\n      console.log(result)\n      if (result[0] !== -1 && result[1] !== -1) {\n        if (result[2] === false) {\n          squares_print[result[0]] = null\n          squares_print[result[1]] = null\n          console.log(\"erase\")\n        }\n        result = [-1, -1, false]\n\n\n        //0 cartes d'affichés\n      }\n      if (result[0] === -1 && result[1] === -1) {\n        if (squares_print[i] === null) {\n          result[0] = i\n          squares_print[i] = squares[i]\n          console.log(\"0\")\n\n        } else if (typeof squares[i] === 'undefined'){\n          infos = \" | Pas une carte\"\n        } else {\n          infos = \" | Déjà retourné\"\n        }\n\n\n        //1 cartes d'affichés\n      } else if (result[1] === -1) {\n        if (squares_print[i] === null) {\n          result[1] = i\n          squares_print[i] = squares[i]\n          console.log(\"1\")\n          console.log(\"compare\")\n          if (result[0] !== result[1] && squares[result[0]] === squares[result[1]]) {\n            squares_print[result[0]] = squares[result[0]]\n            squares_print[result[1]] = squares[result[1]]\n            result[2] = true\n            console.log(\"true\")\n            score[p] = score[p] + 3\n            nbPairsFound += 1\n          } else {\n            result[2] = false\n            console.log(\"false\")\n            score[p] = score[p] - 1\n          }\n\n        } else if (typeof squares[i] === 'undefined'){\n          infos = \" | Pas une carte\"\n        } else {\n          infos = \" | Déjà retourné\"\n        }\n\n        console.log(\"player: \" + p)\n        console.log(\"score 0: \" + score[0])\n        console.log(\"score 1: \" + score[1])\n        oneIsNext = !oneIsNext\n        console.log(\"oneIsNext: \" + oneIsNext)\n      }\n      console.log(\"nbPairsFound: \" + nbPairsFound)\n      console.log(\"prevstate.nbPairs: \" + prevstate.nbPairs)\n      if (nbPairsFound == prevstate.nbPairs) {\n        infos = \"Gagné !\"\n        console.log(\"We are in! \")\n        nbGames += 1\n        this.endgame()\n        \n      }\n\n      return {\n        squares: squares,\n        squares_print: squares_print,\n        result: result,\n        score: score,\n        nbPairsFound: nbPairsFound,\n        infos: infos,\n        oneIsNext: oneIsNext,\n        nbGames: nbGames,\n      };\n    });\n  }\n\n  handleFormPairs(event) {\n    this.setState(() => {\n      return{\n        nbPairs: event.target.value \n      }\n    })\n    console.log(this.state.nbPairs)\n  }\n\n  handleFormNick1(event) {\n    this.setState(() => {\n      return{\n        nickname1: event.target.value \n      }\n    })\n    console.log(this.state.nickname1)\n  }\n\n  handleFormNick2(event) {\n    this.setState(() => {\n      return{\n        nickname2: event.target.value \n      }\n    })\n    console.log(this.state.nickname2)\n  }\n\n  renderSquare(i) {\n    return <Square value={this.state.squares_print[i]}\n      key={i}\n      onClick={() => this.handleSquareClick(i)} />;\n  }\n\n  renderSquareScores(i) {\n    return <SquareScores value={this.state.scores[i]}\n      key={i}/>;\n  }\n\n  createTable() {\n    let table = []\n    let k = 0\n    let col = this.state.col\n\n    for (let i = 0; i < col; i++) {\n      let children = []\n      for (let j = 0; j < col; j++) {\n        children.push(this.renderSquare(k))\n        k++\n      }\n      table.push(children)\n      table.push(<div className=\"board-row\" key={i}></div>)\n    }\n    return table\n  }\n\n  createTableScores() {\n    let table = []\n    let k = 0\n    let col = 4\n    let row = this.state.nbGames\n    console.log(\"row: \" + row)\n\n    for (let i = 0; i < row; i++) {\n      let children = []\n      for (let j = 0; j < col; j++) {\n        children.push(this.renderSquareScores(k))\n        k++\n      }\n      table.push(children)\n      table.push(<div className=\"board-row\" key={i}></div>)\n    }\n    return table\n  }\n\n  createTableScore() {\n    let table = []\n    let children = []\n\n    children.push(this.state.score[0])\n    children.push(this.state.nickname1)\n    table.push(children)\n    table.push(<div className=\"board-row\" key={0}></div>)\n    children.push(this.state.score[0])\n    children.push(this.state.nickname0)\n    table.push(children)\n    table.push(<div className=\"board-row\" key={1}></div>)\n    return table\n\n  }\n\n  render() {\n\n    let src = \"./images/(\" + 5 + \").jpg\"\n    console.log(\"src: \" + src)\n\n    let tour = \"c'est au tour de: \" + ((this.state.oneIsNext) ? this.state.nickname1 : this.state.nickname2)\n    let status =this.state.infos\n    let points = this.state.nickname1 + \": \" + this.state.score[0] + \"pts  |  \" + this.state.nickname2 + \": \" +  this.state.score[1] + \"pts \"\n\n    return (\n      <div>\n        <form>\n          <label>\n            Joueur 1:\n            <input style={{ width: '100px' }} value={this.state.nickname1} type=\"text\" name = \"toto\"\n              onChange={this.handleFormNick1} \n              />\n          </label>\n        </form>\n        <form>\n          <label>\n            Joueur 2:\n            <input style={{ width: '100px' }} value={this.state.nickname2} type=\"text\"\n              onChange={this.handleFormNick2} \n              />\n          </label>\n        </form>\n\n        <div className=\"status\">{points}</div>\n\n        <button variant=\"primary\"\n          onClick={() => this.setGame()}>Start\n        </button>{\" \"}{status}\n        \n        <div className=\"status\">{tour}</div>\n        {this.createTable()}\n        <form>\n          <label>\n            Paires :\n            <input style={{ width: '40px' }} value={this.state.nbPairs} type=\"number\"\n              onChange={this.handleFormPairs} \n              />\n              {\" | \"}{this.state.nbPairs - this.state.nbPairsFound}{' paires restantes'}\n          </label>\n        </form>\n          <img onError={console.log(\"bug image: \" + src)} className=\"img\" src={img1} alt=\"P\"></img>\n        <div>\n          {this.createTableScores()}\n        </div>\n      </div>\n\n    );\n  }\n}\n\nclass Game extends React.Component {\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board />\n        </div>\n        <div className=\"game-info\">\n          <div>{/* status */}</div>\n          <ol>{/* TODO */}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n\n\nfunction shuffle(array) {\n  var currentIndex = array.length, temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}"],"sourceRoot":""}